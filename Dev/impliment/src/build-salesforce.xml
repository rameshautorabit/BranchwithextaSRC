<project default="publish-artifacts" basedir="." xmlns:ar="antlib:com.salesforce">
	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
	<taskdef resource="com/rabit/crypt/util/crypt-ant-tasks.properties"/>
	<taskdef resource="com/perforce/p4java/ant/tasks/P4Tasks.properties"/>
	<taskdef name="unset" classname="ise.antelope.tasks.Unset"/>
	<property environment="env"/>
	<property name="RBA_HOME" value="${env.RBA_HOME}" />
	<property file="${RBA_HOME}/global.properties"/>
	<property file="${AUTOMATION_PROJECT_DIR}/cijobsettings.properties"/>
	<import file="${MACROS_DIR}/${vcstype}-tasks.xml" optional="true"/>
	<import file="${AUTOMATION_SCRIPTS_DIR}/macrodefs.xml"/>
	<property name="ZipSrc" value="${RETRIEVED_SOURCE_DIR}"/>
	<property name="build.dir" value="${AUTOMATION_PROJECT_DIR}/build"/>
	<property name="dist.dir" value="${AUTOMATION_PROJECT_DIR}/dist"/>
	<property name="testrepo.dir" value="${AUTOMATION_PROJECT_DIR}/test-repo"/>
	<property file="${AUTOMATION_PROJECT_DIR}/sandbox.properties"/>
	<property file="${AUTOMATION_PROJECT_DIR}/deploy.properties"/>
	<property file="${AUTOMATION_PROJECT_DIR}/custom.properties"/>
	<property file="${AUTOMATION_PROJECT_DIR}/awscredentials.properties"/>
	<property name="buildnumber.file" value="${AUTOMATION_PROJECT_DIR}/build.number"/>
	<property name="revision.file" value="${AUTOMATION_PROJECT_DIR}/revision.number"/>
	<property name="revision.bkp.file" value="${AUTOMATION_PROJECT_DIR}/revision.number_bk"/>
	<script language="javascript">
		var orgNameWithProjectName = project.getProperty("project.name");
		project.setProperty("orgName", orgNameWithProjectName.split("_")[0]);
		project.setProperty("projectName", orgNameWithProjectName.split("_")[1]);
	</script>
	<property name="ZipDest" value="${AUTOMATION_PROJECT_DIR}/dist/${projectName}.zip"/>
	<path id="selenium.classpath">
		<fileset dir="${EXT_DIR}/selenium">
			<include name="*.jar"/>
		</fileset>
	</path>
	<path id="rabit.jars.classpath">
		<fileset dir="${EXT_DIR}">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	<path id="svnant.classpath">
		<fileset dir="${EXT_DIR}/svnant">
			<include name="*.jar"/>
		</fileset>
	</path>
	<path id="namespacechangelib.path">
		<fileset dir="${UTILS_DIR}/NamespaceChange/lib">
			<include name="*.jar"/>
		</fileset>
	</path>
	<path id="customutils.path">
		<fileset dir="${UTILS_DIR}/lib">
			<include name="*.jar"/>
		</fileset>
	</path>
	<property name="svn.failonerror" value="true"/>
	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="svnant.classpath" />

	<target name="checkmodificaionexist">
		<echo message="in checkmodificaionexist target sourcetype is ${sourcetype} and buildforced is ${buildforced}" />
		<if>
			<equals arg1="${buildforced}" arg2="false"/>
			<then>
				<if>
					<equals arg1="${sourcetype}" arg2="sandbox"/>
					<then>
						<echo message="in checkmodificaionexist target block property is ${scheduledsanboxbuildcontinue}"/>
						<trycatch>
							<try>
								<if>
									<equals arg1="${authentication.type}" arg2="OAuth"/>
									<then>
										<antcall target="update-oauth"/>
									</then>
									<else>
										<decrypt password="${password}" property="sandboxdecryptpassword"/>
									</else>
								</if>
							</try>
							<catch>
								<property file="${buildnumber.file}"/>
								<sleep seconds="10"/>
								<echo message="${build.number}"/>
								<script language="javascript">
									<![CDATA[
										var oldbuildNum = parseInt(project.getProperty('build.number'));
										var newBuildNum = oldbuildNum+1 ;
										project.setProperty('newBuildNum', newBuildNum);
									]]>
								</script>
								<echo message="${newBuildNum}"/>
								<sendbuildregistration filename="${project.name}/statusreport/buildregistration_${project.name}_build${newBuildNum}.xml" ostype="salesforce"/>
								<sleep seconds="10"/>
								<sendbuildstatus filename="${project.name}/statusreport/buildstatus_${project.name}_${HOSTNAME}_build${newBuildNum}.xml" statusmsg="Failed" statustag="buildstatus" ostype="salesforce"/>
								<echo message="Build failed..."/>
								<fail message="Build failed..." />
							</catch>
						</trycatch>
						
						<antcall target="run-sandboxmodificationcheck"/>
						<unset file="${AUTOMATION_PROJECT_DIR}/sandbox.properties"/>
						<property file="${AUTOMATION_PROJECT_DIR}/sandbox.properties"/>
						<echo message="After sandboxmodificationcheck target block property is ${scheduledsanboxbuildcontinue}"/>
						<if>
							<equals arg1="${scheduledsanboxbuildcontinue}" arg2="Yes"/>
							<then>
								<property name="continue" value="true"/>
							</then>
							<else>
								<property name="continue" value="false"/>
								<fail message="No Modifications found in Sandbox. we should stop the build" />
							</else>
						</if>
					</then>
					<else>
						<echo message="in checkmodificaionexist target block property is ${vcstype}"/>
						<if> 
							<equals arg1="${vcstype}" arg2="svn"/>
							<then>
								<property file="${revision.file}"/>
								<if>
									<equals arg1="${isOSWindows}" arg2="true" />
									<then>
										<decrypt password="${scm.password}==" property="decryptpassword"/>
									</then>
									<else>
										<decrypt password="${scm.password}" property="decryptpassword"/>
									</else>
								</if>
								<svn-update path="${CHECKOUT_DIR}" username="${scm.user}" password="${decryptpassword}" output.file="update.txt"/>
								<svn-revision path="${CHECKOUT_DIR}" username="${scm.user}" password="${decryptpassword}"/>
								<script language="javascript">
									<![CDATA[
										var oldRev = parseInt(project.getProperty('new.repo.revision'));
										var newRev = parseInt(project.getProperty('latestrevision'));
										project.setProperty('continue', newRev > oldRev);
									]]>
								</script>
								<echo> Is SVN Revision Changed from previous Build:${continue}</echo>
								<unset file="${revision.file}"/>
								<propertyfile comment="CI Job Properties" file="${AUTOMATION_PROJECT_DIR}/cijobsettings.properties">
									<entry key="scmbuildcontinue" value="${continue}"/>
									<entry key="vcstype" value="${vcstype}"/>
								</propertyfile>
								<if>
									<equals arg1="${continue}" arg2="true"/>
									<then>
										<property name="continue" value="true"/>
									</then>
									<else>
										<property name="continue" value="false"/>
										<fail message="No Modifications found in SCM. we should stop the build" />
									</else>
								</if>
							</then>
							<else>
								<property name="continue" value="true"/>
							</else>
						</if>
					</else>
				</if>
			</then>
			<else>
				<echo message="The build is forced. No need to check for modifications."/>
				<property name="continue" value="true"/>
			</else>
		</if>

	</target>

	<target name="clean" depends="checkmodificaionexist" if="${continue}">
		<echo message="${build.number}"/>
		<delete dir="${build.dir}"/>
		<delete dir="${dist.dir}"/>
		<delete dir="${testrepo.dir}"/>
	</target>

	<target depends="clean" name="init">
		<mkdir dir="${testrepo.dir}"/>
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${build.dir}/test/frt/selenium"/>
		<mkdir dir="${build.dir}/test/frt/selenium/resources"/>
	</target>

	<target name="checkOS">
		<condition property="isOSWindows">
			<os family="windows" />
		</condition>
		<if>
			<equals arg1="${isOSWindows}" arg2="true" />
			<then>
				<property name="os.type" value="Windows"/>
				<property name="HOSTNAME" value="${env.COMPUTERNAME}"/>
			</then>
			<else>
				<property name="os.type" value="Linux"/>
				<exec executable="hostname" outputproperty="computer.hostname" failonerror="true"/>
				<property name="HOSTNAME" value="${computer.hostname}"/>
			</else>
		</if>
	</target>

	<target name="update-buildnumber" depends="init">
		<propertyfile comment="Build Number for ANT. Do not edit!" file="${buildnumber.file}">
			<entry key="build.number" value="${label}"/>
		</propertyfile>
		<!-- Replace the label with build number -->
		<replaceregexp byline="true" file="${buildnumber.file}" match="^(build.number=)(.*)\.(\d*)$" replace="\1\3"/>
		<property file="${buildnumber.file}"/>
		<sleep seconds="10"/>
		<echo message="${build.number}"/>
		<sendbuildregistration filename="${project.name}/statusreport/buildregistration_${project.name}_build${build.number}.xml" ostype="salesforce"/>
	</target>

	<target name="update-revision">
		<copy failonerror="true" file="${revision.file}" overwrite="true" tofile="${revision.bkp.file}"/>
		<property file="${revision.file}"/>
		<property name="older.repo.revision" value="${new.repo.revision}"/>
		<echo message="Updating revision number file"/>
		<propertyfile comment="Revision number of SVN Repository for build ${build.number}" file="${revision.file}">
			<entry key="old.repo.revision" value="${older.repo.revision}"/>
			<entry key="new.repo.revision" value="${repository.revision}"/>
		</propertyfile>
	</target>
	<target name="updateBuildDetails">
		<java classname="com.autorabit.cibuild.SaveCIBuildDetails" fork="true" failonerror="true" classpathref="customutils.path">
			<arg value="${project.name}"/>
		</java>
	</target>

	<target name="invokebuild" depends="checkOS,update-buildnumber">
		<if>
			<equals arg1="${buildforced}" arg2="false"/>
			<then>
				<antcall target="updateBuildDetails"/>
			</then>
		</if>
		<if>
			<available file="${AUTOMATION_PROJECT_DIR}/custom.properties" type="file"/>
			<then>
				<if>
					<equals arg1="${buildforced}" arg2="false"/>
					<then>
						<var name="customlabel" unset="true"/>
						<property name="customlabel" value="false"/>
					</then>
				</if>
				<echo message="customlabel value is ${customlabel}"/>
			</then>
			<else>
				<property name="customlabel" value="false"/>
			</else>
		</if>
		<trycatch>
			<try>
				<if>
					<equals arg1="${sourcetype}" arg2="sandbox"/>
					<then>
						<antcall target="sandboxbuild"/>
					</then>
					<else>
						<antcall target="scmbuild"/>
					</else>
				</if>
			</try>
			<catch>
				<sendbuildstatus filename="${project.name}/statusreport/buildstatus_${project.name}_${HOSTNAME}_build${build.number}.xml" statusmsg="Failed" statustag="buildstatus" ostype="salesforce"/>
				<echo message="Build failed..."/>
				<fail message="Build failed..." />
			</catch>
		</trycatch>
	</target>

	<target name="scmbuild">
		<if>
			<equals arg1="${isOSWindows}" arg2="true" />
			<then>
				<decrypt password="${scm.password}==" property="decryptpassword"/>
			</then>
			<else>
				<decrypt password="${scm.password}" property="decryptpassword"/>
			</else>
		</if>
		<if>
			<equals arg1="${scmhost}" arg2="awscodecommit"/>
			<then>
				<echo message="Invoking AWSCodeCommitHttpCredentials."/>
				<antcall target="run-awscodecommithttpcredentials"/>
				<var name="decryptpassword" unset="true"/>
				<var name="aws.password" unset="true"/>
				<property file="${AUTOMATION_PROJECT_DIR}/awscredentials.properties"/>
				<property name="decryptpassword" value="${aws.password}"/>
			</then>
			<else>
				<echo message="Not a AWSCodeCommit"/>
			</else>
		</if>
		<if>
			<available file="${user.home}/.rabit/org/${orgName}/config/id_rsa"/>
			<then>
				<copy file="${user.home}/.rabit/org/${orgName}/config/id_rsa" tofile="${user.home}/.ssh/id_rsa" overwrite="true" failonerror="true"/>
				<exec executable = "/bin/sh" dir = "${RBA_HOME}/macros" failonerror="true">
					<arg value = "-c" />
					<arg value = "chmod 600 ${user.home}/.ssh/id_rsa"/>
				</exec>
			</then>
		</if>
		<ant antfile="${PROJECTS_DIR}/checkout-project.xml" target="checkout"/>
		<if>
			<available file="${CHECKOUT_DIR}" type="dir"/>
			<then>
				<var name="ZipSrc" unset="true"/>
				<property name="ZipSrc" value="${CHECKOUT_DIR}/customDeploy"/>
				<echo message="ZipSrc Path : ${ZipSrc}"/>
			</then>
		</if>
		<switch value="${vcstype}">
			<case value="svn">
				<antcall target="svn-build"/>
			</case>
			<case value="git">
				<antcall target="git-build"/>
			</case>
			<case value="tfs">
				<antcall target="tfs-build"/>
			</case>
			<case value="p4">
				<antcall target="p4-build"/>
			</case>
		</switch>
	</target>

	<target name="svn-build">
		<svn-update path="${CHECKOUT_DIR}" username="${scm.user}" password="${decryptpassword}" output.file="update.txt"/>
		<echo message="Updating working copy....."/>
		<echo message="${up.out}"/>
		<svn-revision path="${CHECKOUT_DIR}" username="${scm.user}" password="${decryptpassword}"/>
		<echo message="${info.out}"/>
		<echo message="Current revision number is : ${latestrevision}"/>
		<property name="repository.revision" value="${latestrevision}"/>
		<antcall target="update-revision"/>
		<property file="${revision.file}"/>
		<delete dir="${ZipSrc}"/>
		<mkdir dir="${ZipSrc}"/>
		<echo message="almworkflowenabled :${almworkflowenabled};customlabel : ${customlabel} almbuildwithoutworkitem:${almbuildwithoutworkitem}"/>
		<if>
			<and>
				<equals arg1="${almworkflowenabled}" arg2="false"/>
				<equals arg1="${customlabel}" arg2="false"/>
			</and>
			<then>
				<if>
					<equals arg1="${deploy.revision}" arg2=""/>
					<then>
						<echo message="Preparing log between these revisions = ${old.repo.revision} : ${new.repo.revision}"/>
						<svn-log-base path="${CHECKOUT_DIR}" username="${scm.user}" password="${decryptpassword}" output.file="${CHECKOUT_DIR}/log.xml"/>
					</then>
					<else>
						<echo message="Preparing log between these revisions = ${deploy.revision} : ${new.repo.revision}"/>
						<svn-log path="${CHECKOUT_DIR}" old.repo.revision="${deploy.revision}" new.repo.revision="${new.repo.revision}" username="${scm.user}" password="${decryptpassword}" output.file="${CHECKOUT_DIR}/log.xml"/>
					</else>
				</if>
			</then>
			<else>
				<if>
					<equals arg1="${almworkflowenabled}" arg2="true"/>
					<then>
						<if>
							<equals arg1="${buildforced}" arg2="false"/>
							<then>
								<antcall target="run-commitedworkitems"/>
							</then>
							<else>
								<if>
									<equals arg1="${almbuildwithoutworkitem}" arg2="yes"/>
									<then>
										<antcall target="run-commitedworkitems"/>
									</then>
								</if>
							</else>
						</if>
					</then>
					<else>
						<copy file="${AUTOMATION_PROJECT_DIR}/log.xml" tofile="${CHECKOUT_DIR}/log.xml" failonerror="true"/>
					</else>	
				</if>
			</else>
		</if>
		<java classname="com.autorabit.sforce.PreparePackageManifestOnSCM" fork="true" failonerror="true" classpathref="customutils.path">
			<arg value="${scm.url}"/>
			<arg value="${scm.user}"/>
			<arg value="${decryptpassword}"/>
			<arg value="test"/>
			<arg value="${project.name}"/>
			<arg value="svn"/>
			<arg value="${scm.branchname}"/>
			<arg value="${deploy.revision}"/>
			<arg value="${almworkflowenabled}"/>
		</java>
		<echo> repostiory revison is ${repository.revision} </echo>
		<antcall target="package"/>
		<svn-checkout path="${CHECKOUT_DIR}" repository.URL="${scm.url}" username="${scm.user}" password="${decryptpassword}" output.file="checkout.txt" />
		<echo message="${co.out}"/>
		<if>
			<available file="${CHECKOUT_DIR}/log.xml" type="file"/>
			<then>
				<copy file="${CHECKOUT_DIR}/log.xml" tofile="${env.RABIT_FTP_HOME}\${orgName}\${projectName}\build.${build.number}\${orgName}_${projectName}_${build.number}_scmlog.txt"/>
			</then>
			<else>
				<copy file="${AUTOMATION_PROJECT_DIR}/ALMlog.xml" tofile="${env.RABIT_FTP_HOME}\${orgName}\${projectName}\build.${build.number}\${orgName}_${projectName}_${build.number}_scmlog.txt"/>
			</else>
		</if>
		
	</target>

	<target name="git-build">
		<if>
			<equals arg1="${isautocommit}" arg2="true"/>
			<then>
				<echo message="Auto commit."/>
			</then>
			<else>
				<git-pull path="${CHECKOUT_DIR}" branch="${scm.branchname}" />
				<echo message="${CHECKOUT_DIR}"/>
				<git-revision path="${CHECKOUT_DIR}" />
				<echo message="${lastCommitRevision}"/>
				<property name="repository.revision" value="${lastCommitRevision}"/>
				<antcall target="update-revision"/>
				<property file="${revision.file}"/>
				<delete dir="${ZipSrc}"/>
				<mkdir dir="${ZipSrc}"/>
				<echo message="almworkflowenabled :${almworkflowenabled};customlabel : ${customlabel} almbuildwithoutworkitem:${almbuildwithoutworkitem}"/>
				<if>
					<and>
						<equals arg1="${almworkflowenabled}" arg2="false"/>
						<equals arg1="${customlabel}" arg2="false"/>
					</and>
					<then>
						<if>
							<equals arg1="${deploy.revision}" arg2=""/>
							<then>
								<echo message="Preparing log between these revisions = ${old.repo.revision} : ${new.repo.revision}"/>
								<git-log path="${CHECKOUT_DIR}" params="HEAD --name-status --pretty=format:&quot;Revision: %h&quot;" output="${CHECKOUT_DIR}/log.txt"/>
							</then>
							<else>
								<echo message="Preparing log between these revisions = ${deploy.revision} : HEAD"/>
								<git-log path="${CHECKOUT_DIR}" params="${deploy.revision}..HEAD --name-status --pretty=format:&quot;Revision: %h&quot;" output="${CHECKOUT_DIR}/log.txt"/>
							</else>
						</if>
					</then>
					<else>
						<if>
							<equals arg1="${almworkflowenabled}" arg2="true"/>
							<then>
								<if>
									<equals arg1="${buildforced}" arg2="false"/>
									<then>
										<antcall target="run-commitedworkitems"/>
									</then>
									<else>
										<if>
											<equals arg1="${almbuildwithoutworkitem}" arg2="yes"/>
											<then>
												<antcall target="run-commitedworkitems"/>
											</then>
										</if>
									</else>
								</if>
							</then>
							<else>
								<copy file="${AUTOMATION_PROJECT_DIR}/log.txt" tofile="${CHECKOUT_DIR}/log.txt" failonerror="true"/>
							</else>
						</if>
					</else>
				</if>
				<java classname="com.autorabit.sforce.PreparePackageManifestOnSCM" fork="true" failonerror="true" classpathref="customutils.path">
					<arg value="${scm.url}"/>
					<arg value="${scm.user}"/>
					<arg value="${decryptpassword}"/>
					<arg value="test"/>
					<arg value="${project.name}"/>
					<arg value="git"/>
					<arg value="/src/"/>
					<arg value="${deploy.revision}"/>
					<arg value="${almworkflowenabled}"/>
				</java>
				<property name="repository.revision" value = "${lastCommitRevision}"/>
				<echo> repostiory revison is ${repository.revision} </echo>
				<antcall target="package"/>
				<git-checkout path="${CHECKOUT_DIR}" branchname="${scm.branchname}" />
				<echo message="${checkout.out}"/>
				<if>
					<available file="${CHECKOUT_DIR}/log.txt" type="file"/>
					<then>
						<copy file="${CHECKOUT_DIR}/log.txt" tofile="${env.RABIT_FTP_HOME}\${orgName}\${projectName}\build.${build.number}\${orgName}_${projectName}_${build.number}_scmlog.txt"/>
					</then>
					<else>
						<copy file="${AUTOMATION_PROJECT_DIR}/ALMlog.xml" tofile="${env.RABIT_FTP_HOME}\${orgName}\${projectName}\build.${build.number}\${orgName}_${projectName}_${build.number}_scmlog.txt"/>
					</else>
				</if>
			</else>
		</if>
	</target>

	<target name="tfs-build">
		<if>
			<equals arg1="${isautocommit}" arg2="true"/>
			<then>
				<echo message="Auto commit."/>
			</then>
			<else>
				<if>
					<available file="${CHECKOUT_DIR}/src" type="dir"/>
					<then>
						<tfs-latest-revision format="detailed" item="${CHECKOUT_DIR}/src" />
					</then>
					<else>
						<tfs-latest-revision format="detailed" item="${CHECKOUT_DIR}" />
					</else>
				</if>
				<property name="repository.revision" value = "${Changeset}"/>
				<echo message="repostiory revison is  : ${Changeset}"/>
				<antcall target="update-revision"/>
				<property file="${revision.file}"/>
				<delete dir="${ZipSrc}"/>
				<mkdir dir="${ZipSrc}"/>
				<echo message="almworkflowenabled :${almworkflowenabled};customlabel : ${customlabel} almbuildwithoutworkitem:${almbuildwithoutworkitem}"/>
				<if>
					<and>
						<equals arg1="${almworkflowenabled}" arg2="false"/>
						<equals arg1="${customlabel}" arg2="false"/>
					</and>
					<then>
						<if>
							<equals arg1="${deploy.revision}" arg2=""/>
							<then>
								<echo message="Preparing log between these revisions = ${old.repo.revision} : ${new.repo.revision}"/>
								<tfs-log-without-version dir="${CHECKOUT_DIR}" output.file="${CHECKOUT_DIR}/log.txt"/>
							</then>
							<else>
								<echo message="Preparing log between these revisions = ${deploy.revision} : ${new.repo.revision}"/>
								<tfs-log dir="${CHECKOUT_DIR}" old.repo.revision="${deploy.revision}" new.repo.revision="${new.repo.revision}" output.file="${CHECKOUT_DIR}/log.txt"/>
							</else>
						</if>
					</then>
					<else>
						<if>
							<equals arg1="${almworkflowenabled}" arg2="true"/>
							<then>
								<if>
									<equals arg1="${buildforced}" arg2="false"/>
									<then>
										<antcall target="run-commitedworkitems"/>
									</then>
									<else>
									<if>
										<equals arg1="${almbuildwithoutworkitem}" arg2="yes"/>
										<then>
											<antcall target="run-commitedworkitems"/>
										</then>
									</if>
									</else>
								</if>
							</then>
							<else>
								<copy file="${AUTOMATION_PROJECT_DIR}/log.txt" tofile="${CHECKOUT_DIR}/log.txt" failonerror="true"/>
							</else>
						</if>
					</else>
				</if>
				<java classname="com.autorabit.sforce.PreparePackageManifestOnSCM" fork="true" failonerror="true" classpathref="customutils.path">
					<arg value="${scm.url}"/>
					<arg value="${scm.user}"/>
					<arg value="${decryptpassword}"/>
					<arg value="test"/>
					<arg value="${project.name}"/>
					<arg value="tfs"/>
					<arg value="${projectpath}"/>
					<arg value="${deploy.revision}"/>
					<arg value="${almworkflowenabled}"/>
				</java>
				<antcall target="package"/>
				<if>
					<available file="${CHECKOUT_DIR}/log.txt" type="file"/>
					<then>
						<copy file="${CHECKOUT_DIR}/log.txt" tofile="${env.RABIT_FTP_HOME}\${orgName}\${projectName}\build.${build.number}\${orgName}_${projectName}_${build.number}_scmlog.txt"/>
					</then>
					<else>
						<copy file="${AUTOMATION_PROJECT_DIR}/ALMlog.xml" tofile="${env.RABIT_FTP_HOME}\${orgName}\${projectName}\build.${build.number}\${orgName}_${projectName}_${build.number}_scmlog.txt"/>
					</else>
				</if>
			</else>
		</if>
	</target>

	<target name="p4-build">
		<if>
			<equals arg1="${isautocommit}" arg2="true"/>
			<then>
				<echo message="Auto commit."/>
			</then>
			<else>
				<p4jcounter name="change" property="repository.revision" protocol="p4javassl" port="${scm.url}" client="${clientname}" user="${scm.user}" passwd="${decryptpassword}"/>
				<echo message="repostiory revison is  : ${repository.revision}"/>
				<antcall target="update-revision"/>
				<property file="${revision.file}"/>
				<delete dir="${ZipSrc}"/>
				<mkdir dir="${ZipSrc}"/>
				<if>
					<equals arg1="${deploy.revision}" arg2=""/>
					<then>
						<echo message="Preparing log between these revisions = ${old.repo.revision} : ${new.repo.revision}"/>
						<exec executable = "p4" dir="${CHECKOUT_DIR}" output="${CHECKOUT_DIR}/log.txt" failonerror="true">
							<arg value = "-p" />
							<arg value = "${scm.url}" />
							<arg value = "-u" />
							<arg value = "${scm.user}" />
							<arg value = "filelog" />
							<arg value = "-s" />
							<arg value = "-t" />
							<arg value = "-m" />
							<arg value = "1" />
							<arg value = "${depotpath}/.." />
						</exec>
					</then>
					<else>
						<echo message="Preparing log between these revisions = ${deploy.revision} : HEAD"/>
						<exec executable = "p4" dir="${CHECKOUT_DIR}" output="${CHECKOUT_DIR}/log.txt" failonerror="true">
							<arg value = "-p" />
							<arg value = "${scm.url}" />
							<arg value = "-u" />
							<arg value = "${scm.user}" />
							<arg value = "filelog" />
							<arg value = "-s" />
							<arg value = "-t" />
							<arg value = "-m" />
							<arg value = "1" />
							<arg value = "${depotpath}/.." />
						</exec>
					</else>
				</if>
				<java classname="com.autorabit.sforce.PreparePackageManifestOnSCM" fork="true" failonerror="true" classpathref="customutils.path">
					<arg value="${scm.url}"/>
					<arg value="${scm.user}"/>
					<arg value="${decryptpassword}"/>
					<arg value="test"/>
					<arg value="${project.name}"/>
					<arg value="p4"/>
					<arg value="/src"/>
					<arg value="${deploy.revision}"/>
					<arg value="${almworkflowenabled}"/>
				</java>
				<antcall target="package"/>
				<if>
					<available file="${CHECKOUT_DIR}/log.txt" type="file"/>
					<then>
						<copy file="${CHECKOUT_DIR}/log.txt" tofile="${env.RABIT_FTP_HOME}\${orgName}\${projectName}\build.${build.number}\${orgName}_${projectName}_${build.number}_scmlog.txt"/>
					</then>
					<else>
						<copy file="${AUTOMATION_PROJECT_DIR}/ALMlog.xml" tofile="${env.RABIT_FTP_HOME}\${orgName}\${projectName}\build.${build.number}\${orgName}_${projectName}_${build.number}_scmlog.txt"/>
					</else>
				</if>
			</else>
		</if>
	</target>

	<target name="sandboxbuild" depends="proxy">
		<if>
			<equals arg1="${isautocommit}" arg2="true"/>
			<then>
				<if>
					<available file="${user.home}/.rabit/org/${orgName}/config/id_rsa"/>
					<then>
						<copy file="${user.home}/.rabit/org/${orgName}/config/id_rsa" tofile="${user.home}/.ssh/id_rsa" overwrite="true" failonerror="true"/>
						<exec executable = "/bin/sh" dir = "${RBA_HOME}/macros" failonerror="true">
							<arg value = "-c" />
							<arg value = "chmod 600 ${user.home}/.ssh/id_rsa"/>
						</exec>
					</then>
				</if>
				<if>
					<equals arg1="${isOSWindows}" arg2="true" />
					<then>
						<decrypt password="${scm.password}==" property="decryptpassword"/>
					</then>
					<else>
						<decrypt password="${scm.password}" property="decryptpassword"/>
					</else>
				</if>
				<if>
					<equals arg1="${scmhost}" arg2="awscodecommit"/>
					<then>
						<echo message="Invoking AWSCodeCommitHttpCredentials."/>
						<antcall target="run-awscodecommithttpcredentials"/>
						<var name="decryptpassword" unset="true"/>
						<property file="${AUTOMATION_PROJECT_DIR}/awscredentials.properties"/>
						<property name="decryptpassword" value="${aws.password}"/>
					</then>
				</if>
				<ant antfile="${PROJECTS_DIR}/checkout-project.xml" target="checkout"/>
			</then>
			<else>
				<var name="ZipSrc" unset="true"/>
				<property name="ZipSrc" value="${CHECKOUT_DIR}"/>
				<echo message="Normal sandbox retrieval."/>
			</else>
		</if>
		<echo message="ZipSrc Path : ${ZipSrc}"/>
		<property file="${buildnumber.file}"/>
		<sleep seconds="10"/>
		<delete dir="${ZipSrc}"/>
		<mkdir dir="${ZipSrc}"/>
		<if>
			<equals arg1="${authentication.type}" arg2="Standard"/>
			<then>
				<decrypt password="${password}" property="sandboxdecryptpassword"/>
			</then>
		</if>
		<if>
			<equals arg1="${packagetype}" arg2="fullbackup"/>
			<then>
				<antcall target="update-packagemanifest"/>
				<echo message="Retrieving the metadata."/>
				<if>
					<equals arg1="${authentication.type}" arg2="OAuth"/>
					<then>
						<ar:retrieve refreshToken="${refreshtoken}" serverurl="${instanceurl}" maxPoll="200" retrieveTarget="${ZipSrc}" unpackaged="${AUTOMATION_PROJECT_DIR}/package.xml"/>
					</then>
					<else>
						<decrypt password="${password}" property="sandboxdecryptpassword"/>
						<ar:retrieve username="${username}" password="${sandboxdecryptpassword}${stoken}" serverurl="${sandboxurl}" retrieveTarget="${ZipSrc}" maxPoll="200" unpackaged="${AUTOMATION_PROJECT_DIR}/package.xml"/>
					</else>
				</if>
				<antcall target="avoid-warnings"/>
			</then>
			<else>
				<echo message="Retrieving the metadata."/>
				<if>
					<equals arg1="${authentication.type}" arg2="OAuth"/>
					<then>
						<ar:retrieve refreshToken="${refreshtoken}" serverurl="${instanceurl}" retrieveTarget="${ZipSrc}" packageNames="${package}"/>
					</then>
					<else>
						<ar:retrieve username="${username}" password="${sandboxdecryptpassword}${stoken}" serverurl="${sandboxurl}" retrieveTarget="${ZipSrc}" packageNames="${package}"/>
					</else>
				</if>
			</else>
		</if>
		<sleep seconds="10"/>
		<echo message="Meta Data retrieval is completed."/>
		<antcall target="package"/>
		<if>
			<equals arg1="${isautocommit}" arg2="true"/>
			<then>
				<if>
					<available file="${CHECKOUT_DIR}/src"/>
					<then>
						<property name="checkout.dir" value="${CHECKOUT_DIR}/src"/>
					</then>
					<else>
						<property name="checkout.dir" value="${CHECKOUT_DIR}"/>
					</else>
				</if>
				<java classname="com.autorabit.scm.AutoCommit" fork="true" failonerror="true" classpathref="customutils.path">
					<arg value="${project.name}"/>
					<arg value="${build.number}"/>
					<arg value="${id}"/>
					<arg value="${scm.branchname}"/>
					<arg value="${autocommittype}"/>
					<arg value="${vcstype}"/>
					<arg value="${scm.url}"/>
					<arg value="${scm.user}"/>
					<arg value="${decryptpassword}"/>
					<arg value="${tfsauthor}"/>
				</java>
				<property name="commit.msg" value="Commit from AutoRabit CI Job ${projectName} and build number is ${build.number}"/>
				<switch value="${vcstype}">
					<case value="git">
						<git-revision path="${checkout.dir}" />
						<echo message="${lastCommitRevision}"/>
					</case>
					<case value="svn">
						<svn-revision path="${checkout.dir}" username="${scm.user}" password="${decryptpassword}"/>
						<echo message="${latestrevision}"/>
						<property name="repository.revision" value="${latestrevision}"/>
					</case>
					<case value="tfs">
						<if>
							<available file="${checkout.dir}/src" type="dir"/>
							<then>
								<tfs-latest-revision format="detailed" item="${checkout.dir}/src" />
							</then>
							<else>
								<tfs-latest-revision format="detailed" item="${checkout.dir}" />
							</else>
						</if>
						<echo message="${Changeset}"/>
						<property name="repository.revision" value="${Changeset}"/>
					</case>
					<case value="p4">
						<echo message="Invoking perforce autocommit."/>
						<p4jsync protocol="p4javassl" port="${scm.url}" user="${scm.user}" passwd="${decryptpassword}" client="${clientname}" files="//..." forceupdate="true">
							<fileset dir="${checkout.dir}">
							</fileset>
						</p4jsync>
						<echo message="Adding files to repository."/>
						<p4jadd protocol="p4javassl" port="${scm.url}" user="${scm.user}" passwd="${decryptpassword}" client="${clientname}" files="${checkout.dir}/*"/>
						<echo message="Commiting changes to repository."/>
						<p4jsubmit protocol="p4javassl" port="${scm.url}" user="${scm.user}" passwd="${decryptpassword}" client="${clientname}" changelistdescription="${commit.msg}"/>
						<p4jcounter name="change" property="repository.revision" protocol="p4javassl" port="${scm.url}" client="${clientname}" user="${scm.user}" passwd="${decryptpassword}"/>
						<echo message="repostiory revison is  : ${repository.revision}"/>
					</case>
					<default>
						<echo message="There is no scm." />
					</default>
				</switch>
				<property name="repository.revision" value = "${lastCommitRevision}"/>
				<echo> repostiory revison is ${repository.revision} </echo>
				<antcall target="update-revision"/>
			</then>
			<else>
				<echo message="Auto Commit not enabled..."/>
			</else>
		</if>
	</target>

	<target name="package">
		<antcall target="update-profiles"/>
		<echo message="Zip source is : ${ZipSrc}"/>
		<if>
			<equals arg1="${packagetype}" arg2="managed"/>
			<then>
				<antcall target="update-namespace"/>
			</then>
		</if>
		<java classname="com.autorabit.prepackaging.ReplaceMetaFilesinRetrieveDir" fork="true" failonerror="true" classpathref="customutils.path">
			<arg value="${ZipSrc}"/>
			<arg value="${orgName}"/>
		</java>
		<zip destfile="${ZipDest}" basedir="${ZipSrc}"/>
		<copy file="${ZipSrc}/package.xml" todir="${env.RABIT_FTP_HOME}\${orgName}\${projectName}\build.${build.number}" failonerror="true"/>
		<sleep seconds="10"/>
		<echo message="Packaging completed successful."/>
		<if>
			<equals arg1="${vcstype}" arg2="tfs"/>
			<then>
				<exec executable = "tf" outputproperty="workspace.out" failonerror="true">
					<arg value= "workspace"/>
					<arg value= "-delete"/>
					<arg value= "${project.name};${scm.user}"/>
					<arg value = "-server:${scm.url}" />
					<arg value = "-login:${scm.user},${decryptpassword}" />
				</exec>
				<echo message="Workspace delete status : ${workspace.out}"/>
			</then>
		</if>
	</target>
	
	<target name="prepare-test">
		<if>
			<equals arg1="${test.src}" arg2="vc"/>
			<then>
				<ant antfile="${PROJECTS_DIR}/checkout-testcase-project.xml" target="checkout"/>
				<echo message="Version control testcases"/>
				<property name="test.checkout" value="${CHECKOUT_TEST_DIR}" />
			</then>
			<else>
				<echo message="TAF testcases"/>
				<property name="test.checkout" value="${user.home}/.rabit/org/${orgName}/testgen" />
			</else>
		</if>
		<for param="testlabel" list="${test.labels}">
			<sequential>
				<echo message="Label : @{testlabel}"/>
				<for param="testtype" list="${test.types}">
					<sequential>
						<echo message="Testtype : @{testtype}"/>
						<property name="testtype" value="@{testtype}" />
						<var name="testtypelower" unset="true"/>
						<script language="javascript">
							var testtypeLower = project.getProperty("testtype");
							project.setProperty("testtypelower", testtypeLower.toLowerCase());
						</script>
						<echo message="Testtype Lower : ${testtypelower}"/>
						<mkdir dir="${testrepo.dir}/test/frt/${testtypelower}"/>
						<if>
							<equals arg1="${test.src}" arg2="vc"/>
							<then>
			
							
								<copy todir="${testrepo.dir}/test/frt/${testtypelower}" failonerror="false">
									<fileset dir="${test.checkout}/${testtypelower}/@{testlabel}">
									</fileset>
								</copy>
							</then>
							<elseif>
								<equals arg1="${test.src}" arg2="taf"/>
								<then>
									<copy todir="${testrepo.dir}/test/frt/${testtypelower}" failonerror="false">
									<fileset dir="${test.checkout}/@{testlabel}/@{testtype}/transform">
										<include name="**/*.java"/>
									</fileset>
								</copy>
								</then>
							</elseif>
							<else>
								<echo message="Test cases source not found"/>
							</else>
						</if>
					</sequential>
				</for>
			</sequential>
		</for>
		<echo message="Compiling and publishing Test cases"/>
		<for param="testtype" list="${test.types}">
			<sequential>
				<property name="testtype" value="@{testtype}" />
				<var name="testtypelower" unset="true"/>
				<script language="javascript">
					var testtypeLower = project.getProperty("testtype");
					project.setProperty("testtypelower", testtypeLower.toLowerCase());
				</script>
				<if>
					<equals arg1="${testtypelower}" arg2="provar"/>
					<then>
						<copy todir="${build.dir}/test/frt/${testtypelower}">
							<fileset dir="${test.checkout}/${test.rootpath}">
							</fileset>
						</copy>
					</then>
					<else>
						<if>
							<and>
								<equals arg1="${testtypelower}" arg2="selenium"/>
								<equals arg1="${test.type}" arg2="selenium"/>
							</and>
							<then>
								<if>
									<equals arg1="${ismaven}" arg2="true"/>
									<then>
										<copy todir="${build.dir}/test/frt/${testtypelower}">
											<fileset dir="${test.checkout}/${test.rootpath}">
											</fileset>
										</copy>
									</then>
									<else>
										<copy todir="${testrepo.dir}/test/frt/${testtypelower}">
											<fileset dir="${test.checkout}/${test.rootpath}">
											</fileset>
										</copy>
									</else>
								</if>
							</then>
						</if>
						<if>
							<and>
								<equals arg1="${ismaven}" arg2="false"/>
							</and>
							<then>
								<echo message="Compiling and publishing ${testtype} Test cases"/>
								<mkdir dir="${build.dir}/test/frt/${testtypelower}/resources"/>
								<echo message="${build.dir} Build Dir"/>
								<echo message="${testrepo.dir}/test/frt/${testtypelower} test Dir"/>
								<copy todir="${build.dir}/test/frt/${testtypelower}" failonerror="${test.stoponfailure}">
									<!--fileset dir="${testrepo.dir}/test/frt/${testtypelower}">
										<include name="*.*"/>
									</fileset-->
									
									<fileset dir="${testrepo.dir}/test/frt/${testtypelower}">
									</fileset>
								</copy>
								<!--javac classpathref="selenium.classpath" destdir="${build.dir}/test/frt/${testtypelower}" srcdir="${testrepo.dir}/test/frt/${testtypelower}" failonerror="${test.stoponfailure}" fork="true"/-->
								<copy todir="${build.dir}/test/frt/${testtypelower}/resources" failonerror="${test.stoponfailure}">
									<fileset dir="${testrepo.dir}/test/frt/${testtypelower}/resources">
										<include name="*.*"/>
									</fileset>
								</copy>
							</then>
						</if>
					</else>
				</if>
			</sequential>
		</for>
		<zip basedir="${build.dir}/test/frt" destfile="${dist.dir}/testcases.zip" update="true"/>
	</target>
	
	<target depends="invokebuild" name="publish-test">
		<echo message="test src : ${test.src}, test labels : ${test.labels}, test types : ${test.types}"/>
		<trycatch>
			<try>
				<if>
					<or>
						<equals arg1="${test.src}" arg2="vc"/>
						<equals arg1="${test.src}" arg2="taf"/>
				   </or>
					<then>
						<antcall target="prepare-test"/>
					</then>
					<else>
						<echo message="Test cases source not found"/>
					</else>
				</if>
			</try>
			<catch>
				<sendbuildstatus filename="${project.name}/statusreport/buildstatus_${project.name}_${HOSTNAME}_build${build.number}.xml" statusmsg="Failed" statustag="buildstatus" ostype="salesforce"/>
				<echo message="Build failed..."/>
				<fail message="Build failed..." />
			</catch>
		</trycatch>
	</target>

	<target name="publish-artifacts" depends="publish-test">
		<if>
			<equals arg1="${isRemoteServer}" arg2="false"/>
			<then>
				<mkdir dir="${env.RABIT_FTP_HOME}\${orgName}\${projectName}\build.${build.number}"/>
				<copy todir="${env.RABIT_FTP_HOME}\${orgName}\${projectName}\build.${build.number}" failonerror="true">
					<fileset dir="${dist.dir}">
					</fileset>
				</copy>
			</then>
			<else>
				<switch value="${artifact.store}">
					<case value="ftp">
						<!-- move the file to the regressionregistration folder of the ftproot -->
						<ftp server="${ftp.server.name}" userid="${ftp.username}" password="${ftp.password}" remotedir="${ftp.remote.dir}" depends="yes">
							<fileset file="@{filename}"/>
						</ftp>
					</case>
					<case value="service">
						<java classname="com.rabit.cijob.UpdateArtifact" fork="true" failonerror="true" classpathref="customutils.path">
							<arg value="${projectName}.zip"/>
							<arg value="${ZipDest}"/>
						</java>
					</case>
				</switch>
			</else>
		</if>
		<sleep seconds="10"/>
		<sendbuildstatus filename="${project.name}/statusreport/buildstatus_${project.name}_${HOSTNAME}_build${build.number}.xml" statusmsg="Ready" statustag="buildstatus" ostype="salesforce"/>
	</target>
	
	<target name="proxy">
		<!--setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}" proxyuser="${proxy.username}" proxypassword="${proxy.password}" /-->
	</target>
	
	<target name="update-packagemanifest" description="update package.xml with latest members">
		<echo message="${project.name},${deploy.time},${deploy.number},none_${include.metadatatypes},${exclude.managablestates},${authentication.type},${sandboxurl},${username},${instanceurl},${refreshtoken}"/>
		<java classname="com.autorabit.sforce.GetSfComponentMembers" fork="true" failonerror="true" classpathref="customutils.path">
			<arg value="${project.name}"/>
			<arg value="${deploy.time}"/>
			<arg value="${deploy.number}"/>
			<arg value="none_${include.metadatatypes}"/>
			<arg value="${exclude.managablestates}"/>
			<arg value="${authentication.type}"/>
			<arg value="${sandboxurl}"/>
			<arg value="${username}"/>
			<arg value="${sandboxdecryptpassword}${stoken}"/>
			<arg value="${instanceurl}"/>
			<arg value="${refreshtoken}"/>
		</java>
	</target>

	<target name="update-namespace">
		<java classname="com.autorabit.namespacereplace.ReplaceSourceNameSpace" fork="true" failonerror="true" classpathref="customutils.path">
			<arg value="${ZipSrc}"/>
			<arg value="${sourcenamespace}"/>
			<arg value="${destnamespace}"/>
		</java>
	</target>

	<target name="update-profiles">
		<java classname="com.autorabit.sforce.profiles.ProfilesRefator" fork="true" failonerror="true" classpathref="customutils.path">
			<arg value="${orgName}"/>
			<arg value="${projectName}"/>
			<arg value="${ZipSrc}"/>
		</java>
	</target>

	<target name="avoid-warnings" description="remove warning members from package.xml">
		<java classname="com.autorabit.sforce.avoidwarnings.AvoidWarningsInMetadataRetrive" fork="true" failonerror="true" classpathref="customutils.path">
			<arg value="${ZipSrc}"/>
			<arg value="sourceretrivewarnings.xml"/>
			<arg value="${sfapi.version}"/>
		</java>
		<move file="${ZipSrc}/sourceretrivewarnings.xml" todir="${env.RABIT_FTP_HOME}\${orgName}\${projectName}\build.${build.number}"/>
	</target>

	<target name="run-commitedworkitems" description="Run FetchCommitedWorkitems info">
		<java classname="com.autorabit.workitems.FetchCommitedWorkitems" fork="true" failonerror="true" classpathref="customutils.path">
			<arg value="${orgName}"/>
			<arg value="${scm.url}"/>
			<arg value="${projectName}"/>
			<arg value="${build.number}"/>
			<arg value="${scm.branchname}"/>
		</java>
	</target>

	<target name="run-sandboxmodificationcheck" description="check sandbox modification">
		<java classname="com.autorabit.sforce.GetSfMetaDataMembers" fork="true" failonerror="true" classpathref="customutils.path">
			<arg value="${project.name}"/>
			<arg value="${deploy.time}"/>
			<arg value="${deploy.number}"/>
			<arg value="${sandboxurl}"/>
			<arg value="${username}"/>
			<arg value="${sandboxdecryptpassword}${stoken}"/>
			<arg value="${authentication.type}"/>
			<arg value="${instanceurl}"/>
			<arg value="${accesstoken}"/>
			<arg value="${AUTOMATION_PROJECT_DIR}/sandbox.properties"/>
			<arg value="${refreshtoken}"/>
		</java>
	</target>

	<target name="update-oauth">
		<echo message="${AUTOMATION_PROJECT_DIR}/sandbox.properties"/>
		<java classname="com.autorabit.sforce.oauth.UpdateOauth" fork="true" failonerror="true" classpathref="customutils.path">
			<arg value="${AUTOMATION_PROJECT_DIR}/sandbox.properties"/>
		</java>
	</target>

	<target name="run-awscodecommithttpcredentials" description="Calling for new awscodecommithttpcredentials">
		<echo> AWS CodeCommit Http Credentials</echo>
		<java classname="com.autorabit.aws.AWSCodeCommitHttpCredentials" fork="true" failonerror="true" classpathref="customutils.path">
			<arg value="${project.name}"/>
			<arg value="${scm.url}"/>
			<arg value="${scm.user}"/>
			<arg value="${decryptpassword}"/>
		</java>
	</target>
</project>